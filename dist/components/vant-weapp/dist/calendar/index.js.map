{"version":3,"file":"components/vant-weapp/dist/calendar/index.js","sources":["webpack:///._src_components_vant-weapp_dist_calendar_index.js","webpack:///._src_components_vant-weapp_dist_toast_toast.js"],"sourcesContent":["import { VantComponent } from '../common/component';\nimport {\n  ROW_HEIGHT,\n  getNextDay,\n  compareDay,\n  copyDates,\n  calcDateNum,\n  formatMonthTitle,\n  compareMonth,\n  getMonths,\n  getDayByOffset,\n} from './utils';\nimport Toast from '../toast/toast';\nVantComponent({\n  props: {\n    title: {\n      type: String,\n      value: '日期选择',\n    },\n    color: String,\n    show: {\n      type: Boolean,\n      observer(val) {\n        if (val) {\n          this.initRect();\n          this.scrollIntoView();\n        }\n      },\n    },\n    formatter: null,\n    confirmText: {\n      type: String,\n      value: '确定',\n    },\n    rangePrompt: String,\n    defaultDate: {\n      type: [Number, Array],\n      observer(val) {\n        this.setData({ currentDate: val });\n        this.scrollIntoView();\n      },\n    },\n    allowSameDay: Boolean,\n    confirmDisabledText: String,\n    type: {\n      type: String,\n      value: 'single',\n      observer: 'reset',\n    },\n    minDate: {\n      type: null,\n      value: Date.now(),\n    },\n    maxDate: {\n      type: null,\n      value: new Date(\n        new Date().getFullYear(),\n        new Date().getMonth() + 6,\n        new Date().getDate()\n      ).getTime(),\n    },\n    position: {\n      type: String,\n      value: 'bottom',\n    },\n    rowHeight: {\n      type: [Number, String],\n      value: ROW_HEIGHT,\n    },\n    round: {\n      type: Boolean,\n      value: true,\n    },\n    poppable: {\n      type: Boolean,\n      value: true,\n    },\n    showMark: {\n      type: Boolean,\n      value: true,\n    },\n    showTitle: {\n      type: Boolean,\n      value: true,\n    },\n    showConfirm: {\n      type: Boolean,\n      value: true,\n    },\n    showSubtitle: {\n      type: Boolean,\n      value: true,\n    },\n    safeAreaInsetBottom: {\n      type: Boolean,\n      value: true,\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      value: true,\n    },\n    maxRange: {\n      type: [Number, String],\n      value: null,\n    },\n  },\n  data: {\n    subtitle: '',\n    currentDate: null,\n    scrollIntoView: '',\n  },\n  created() {\n    this.setData({\n      currentDate: this.getInitialDate(),\n    });\n  },\n  mounted() {\n    if (this.data.show || !this.data.poppable) {\n      this.initRect();\n      this.scrollIntoView();\n    }\n  },\n  methods: {\n    reset() {\n      this.setData({ currentDate: this.getInitialDate() });\n      this.scrollIntoView();\n    },\n    initRect() {\n      if (this.contentObserver != null) {\n        this.contentObserver.disconnect();\n      }\n      const contentObserver = this.createIntersectionObserver({\n        thresholds: [0, 0.1, 0.9, 1],\n        observeAll: true,\n      });\n      this.contentObserver = contentObserver;\n      contentObserver.relativeTo('.van-calendar__body');\n      contentObserver.observe('.month', (res) => {\n        if (res.boundingClientRect.top <= res.relativeRect.top) {\n          // @ts-ignore\n          this.setData({ subtitle: formatMonthTitle(res.dataset.date) });\n        }\n      });\n    },\n    getInitialDate() {\n      const { type, defaultDate, minDate } = this.data;\n      if (type === 'range') {\n        const [startDay, endDay] = defaultDate || [];\n        return [\n          startDay || minDate,\n          endDay || getNextDay(new Date(minDate)).getTime(),\n        ];\n      }\n      if (type === 'multiple') {\n        return defaultDate || [minDate];\n      }\n      return defaultDate || minDate;\n    },\n    scrollIntoView() {\n      setTimeout(() => {\n        const {\n          currentDate,\n          type,\n          show,\n          poppable,\n          minDate,\n          maxDate,\n        } = this.data;\n        const targetDate = type === 'single' ? currentDate : currentDate[0];\n        const displayed = show || !poppable;\n        if (!targetDate || !displayed) {\n          return;\n        }\n        const months = getMonths(minDate, maxDate);\n        months.some((month, index) => {\n          if (compareMonth(month, targetDate) === 0) {\n            this.setData({ scrollIntoView: `month${index}` });\n            return true;\n          }\n          return false;\n        });\n      }, 100);\n    },\n    onOpen() {\n      this.$emit('open');\n    },\n    onOpened() {\n      this.$emit('opened');\n    },\n    onClose() {\n      this.$emit('close');\n    },\n    onClosed() {\n      this.$emit('closed');\n    },\n    onClickDay(event) {\n      const { date } = event.detail;\n      const { type, currentDate, allowSameDay } = this.data;\n      if (type === 'range') {\n        const [startDay, endDay] = currentDate;\n        if (startDay && !endDay) {\n          const compareToStart = compareDay(date, startDay);\n          if (compareToStart === 1) {\n            this.select([startDay, date], true);\n          } else if (compareToStart === -1) {\n            this.select([date, null]);\n          } else if (allowSameDay) {\n            this.select([date, date]);\n          }\n        } else {\n          this.select([date, null]);\n        }\n      } else if (type === 'multiple') {\n        let selectedIndex;\n        const selected = currentDate.some((dateItem, index) => {\n          const equal = compareDay(dateItem, date) === 0;\n          if (equal) {\n            selectedIndex = index;\n          }\n          return equal;\n        });\n        if (selected) {\n          const cancelDate = currentDate.splice(selectedIndex, 1);\n          this.setData({ currentDate });\n          this.unselect(cancelDate);\n        } else {\n          this.select([...currentDate, date]);\n        }\n      } else {\n        this.select(date, true);\n      }\n    },\n    unselect(dateArray) {\n      const date = dateArray[0];\n      if (date) {\n        this.$emit('unselect', copyDates(date));\n      }\n    },\n    select(date, complete) {\n      if (complete && this.data.type === 'range') {\n        const valid = this.checkRange(date);\n        if (!valid) {\n          // auto selected to max range if showConfirm\n          if (this.data.showConfirm) {\n            this.emit([\n              date[0],\n              getDayByOffset(date[0], this.data.maxRange - 1),\n            ]);\n          } else {\n            this.emit(date);\n          }\n          return;\n        }\n      }\n      this.emit(date);\n      if (complete && !this.data.showConfirm) {\n        this.onConfirm();\n      }\n    },\n    emit(date) {\n      const getTime = (date) => (date instanceof Date ? date.getTime() : date);\n      this.setData({\n        currentDate: Array.isArray(date) ? date.map(getTime) : getTime(date),\n      });\n      this.$emit('select', copyDates(date));\n    },\n    checkRange(date) {\n      const { maxRange, rangePrompt } = this.data;\n      if (maxRange && calcDateNum(date) > maxRange) {\n        Toast({\n          context: this,\n          message: rangePrompt || `选择天数不能超过 ${maxRange} 天`,\n        });\n        return false;\n      }\n      return true;\n    },\n    onConfirm() {\n      if (\n        this.data.type === 'range' &&\n        !this.checkRange(this.data.currentDate)\n      ) {\n        return;\n      }\n      wx.nextTick(() => {\n        this.$emit('confirm', copyDates(this.data.currentDate));\n      });\n    },\n  },\n});\n","import { isObj } from '../common/utils';\nconst defaultOptions = {\n  type: 'text',\n  mask: false,\n  message: '',\n  show: true,\n  zIndex: 1000,\n  duration: 2000,\n  position: 'middle',\n  forbidClick: false,\n  loadingType: 'circular',\n  selector: '#van-toast',\n};\nlet queue = [];\nlet currentOptions = Object.assign({}, defaultOptions);\nfunction parseOptions(message) {\n  return isObj(message) ? message : { message };\n}\nfunction getContext() {\n  const pages = getCurrentPages();\n  return pages[pages.length - 1];\n}\nfunction Toast(toastOptions) {\n  const options = Object.assign(\n    Object.assign({}, currentOptions),\n    parseOptions(toastOptions)\n  );\n  const context = options.context || getContext();\n  const toast = context.selectComponent(options.selector);\n  if (!toast) {\n    console.warn('未找到 van-toast 节点，请确认 selector 及 context 是否正确');\n    return;\n  }\n  delete options.context;\n  delete options.selector;\n  toast.clear = () => {\n    toast.setData({ show: false });\n    if (options.onClose) {\n      options.onClose();\n    }\n  };\n  queue.push(toast);\n  toast.setData(options);\n  clearTimeout(toast.timer);\n  if (options.duration > 0) {\n    toast.timer = setTimeout(() => {\n      toast.clear();\n      queue = queue.filter((item) => item !== toast);\n    }, options.duration);\n  }\n  return toast;\n}\nconst createMethod = (type) => (options) =>\n  Toast(Object.assign({ type }, parseOptions(options)));\nToast.loading = createMethod('loading');\nToast.success = createMethod('success');\nToast.fail = createMethod('fail');\nToast.clear = () => {\n  queue.forEach((toast) => {\n    toast.clear();\n  });\n  queue = [];\n};\nToast.setDefaultOptions = (options) => {\n  Object.assign(currentOptions, options);\n};\nToast.resetDefaultOptions = () => {\n  currentOptions = Object.assign({}, defaultOptions);\n};\nexport default Toast;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAvFA;AA4FA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AArKA;AA7GA;;;;;;;;;;;;;ACbA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;;;;A","sourceRoot":""}